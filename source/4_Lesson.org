#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil  
#+TITLE: How A Computer Works
#+AUTHOR: Marc Scott

#+BEGIN_HTML
<div class=ribbon>
<a href="https://github.com/MarcScott/8-CS-Computers">Fork me on GitHub</a>
</div>
#+END_HTML

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
* All the gates
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- In the last lesson we looked at how we can combine NAND gates to form other types of gates. Let's have a look at each of the gates and see how we can use them.
- You can click on the input buttons to see what each does.
- The first you should now be familiar with - The NAND gate.
#+BEGIN_HTML
<object data="js/NANDsmall.html" width='200px' height='100px'></object>
#+END_HTML
- The next is the NOT gate, sometimes called an inverter.
#+BEGIN_HTML
<object data="js/NOT.html" width='200px' height='100px'></object>
#+END_HTML
- Then there is the AND gate
#+BEGIN_HTML
<object data="js/AND.html" width='200px' height='100px'></object>
#+END_HTML
- This is an OR gate
#+BEGIN_HTML
<object data="js/OR.html" width='200px' height='100px'></object>
#+END_HTML
- This is the opposite of an OR gate, called a NOR gate
#+BEGIN_HTML
<object data="js/NOR.html" width='200px' height='100px'></object>
#+END_HTML
- This last one is called an XOR gate
#+BEGIN_HTML
<object data="js/XOR.html" width='200px' height='100px'></object>
#+END_HTML
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- So what is the use of all these logic gates?
- Well combining all these logic gates together allows computers to actually work.
- A computer's main job is to store and process data.
- In the first lesson, you learned how to add binary numbers together. Computers use logic gates to do this. Let's start simply and just show the layout for adding two bits together.
#+BEGIN_HTML
<object data="js/adder.html" width='250px' height='200px'></object>
#+END_HTML
- Try it out. The two inputs indicate the bits you want to add together.
- The upper output is the result of the addition, while the lower output is the carry.
#+BEGIN_EXAMPLE
0 + 0 = 0
0 + 1 = 1
1 + 0 = 1
1 + 1 = 0 and carry 1 (so 10)
#+END_EXAMPLE

* Assessment
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
* Assessment
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
* Assessment
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:



